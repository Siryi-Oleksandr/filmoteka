{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,oDCAAC,EAAAD,EAAA,SAGA,MAAME,EAAgB,ICHf,MACLC,oBAAoBC,EAAUC,GAC5B,MAAMC,EAAS,GAUf,OARAF,EAASG,MAAKC,IACZH,EAAUI,SAAQC,IACZA,EAAMC,KAAOH,GACfF,EAAOM,KAAKF,EAAMG,KAAI,GAE1B,IAGKP,CACT,CAEAQ,uBAAuBC,GACrB,OAAOA,EAAIC,KAAIC,GAAMA,EAAGJ,OAAMK,KAAK,KACrC,GFAF,MAAMC,EAAe,IAAI,EAAAlB,EAAAmB,kBAEnBC,GADe,IAAI,EAAAC,EAAAC,cACJ,IAAI,EAAAC,EAAAC,sBACnBC,EAAc,ICfb,MACLC,mBAAmBC,EAASvB,GAC1B,OAAOuB,EAAQZ,KACb,EAACa,YAAEA,EAAWC,UAAEA,EAASC,aAAEA,EAAYC,MAAEA,EAAKrB,GAAEA,EAAEsB,aAAEA,MAI3C,CACLC,OAJajC,EAAAkC,WAAalC,EAAAmC,cAAgBP,EAK1CQ,OAJalC,oBAAoB2B,EAAWzB,GAK5CiC,OAAQP,EAAaQ,QAAQ,GAC7B1B,KAAMmB,EACNrB,GAAIA,EACJ6B,KAAMC,OAAOC,SAAST,MAI9B,CAEAU,qBAAqBC,GACnB,MAAMf,YACJA,EAAWQ,OACXA,EAAMN,aACNA,EAAYc,WACZA,EAAUC,WACVA,EAAUd,MACVA,EAAKe,eACLA,EAAcC,SACdA,EAAQf,aACRA,GACEW,EAIJ,MAAO,CACLV,OAHajC,EAAAkC,WAAalC,EAAAmC,cAAgBP,EAI1ChB,KAAMmB,EACNiB,KAAMlB,EAAaQ,QAAQ,GAC3BW,MAAOL,EACPC,WAAYA,EACZK,cAAeJ,EACfV,OAAQnC,EAAcY,uBAAuBuB,GAC7Ce,MAAOJ,EACPR,KAAMC,OAAOC,SAAST,GAE1B,GD5BIoB,EAAgBhC,EAAaiC,KAAKjC,EAAakC,UAC7BlC,EAAaiC,KAAKjC,EAAamC,YAEvDrC,EACGsC,iBAAiBJ,GACjBK,MAMH,SAA0BC,IAO1B,SAAyBA,GACvB,MAAMC,GAAoB,EAAA7D,EAAA8D,yBAAwBF,GAClDG,EAAAC,KAAKC,YAAYC,UAAYL,CAC/B,CANEM,CAHsBP,EAAO3C,KAAI,EAAC4B,KAAEA,KAC3BlB,EAAYiB,qBAAqBC,KAG5C,IAVGuB,OAiBH,SAAqBC,GACnBC,QAAQC,MAAMF,EAAIG,SAElBF,QAAQG,IAAI,0CACd,IApBGC,SAAQ","sources":["src/library.js","src/js/data-service.js","src/js/genres-service.js"],"sourcesContent":["import {\n  createMarkupFilmsList,\n  createMarkupLibraryList,\n  createMarkupSelectedMovie,\n  trimGenresList,\n  createMarkupSearchedList,\n} from './js/card-markup';\nimport { refs } from './js/refs';\nimport {\n  MoviesApiServise,\n  baseImgUrl,\n  imgPosterSize,\n} from './js/search-servise';\nimport { ModalServise } from './js/modal-servise';\nimport { LocalStorageService } from './js/localStorage-service';\nimport { DataService } from './js/data-service';\n\nconst movieServise = new MoviesApiServise(); // create new instance Class API Service\nconst modalServise = new ModalServise(); // create new instance Class Modal Service\nconst localStorage = new LocalStorageService(); // create new instance Class LocalStorage Service\nconst dataService = new DataService(); // create new instance Class Data Service\n\nconst queueMovieIds = localStorage.load(localStorage.queueKey);\nconst watchedMovieIds = localStorage.load(localStorage.watchedKey);\n\nmovieServise\n  .fetchQueueMovies(queueMovieIds)\n  .then(handleQueueMovie)\n  .catch(handleError)\n  .finally(() => {\n    // here should be spinner.close\n  });\n\nfunction handleQueueMovie(movies) {\n  const necessaryData = movies.map(({ data }) => {\n    return dataService.getDataSelectedMovie(data);\n  });\n  showQueueMovies(necessaryData);\n}\n\nfunction showQueueMovies(movies) {\n  const markupQueueMovies = createMarkupLibraryList(movies);\n  refs.libraryList.innerHTML = markupQueueMovies;\n}\n\nfunction handleError(err) {\n  console.error(err.message);\n  // here should be Notify message\n  console.log('Oops, something went wrong library page');\n}\n","import { MoviesApiServise, baseImgUrl, imgPosterSize } from './search-servise';\nimport { GenresService } from './genres-service';\n\nconst genresService = new GenresService();\n\nexport class DataService {\n  getDataTrendMovies(results, allGenres) {\n    return results.map(\n      ({ poster_path, genre_ids, vote_average, title, id, release_date }) => {\n        const imgUrl = baseImgUrl + imgPosterSize + poster_path;\n        const genres = getTrendMovieGenres(genre_ids, allGenres);\n\n        return {\n          imgUrl: imgUrl,\n          genres: genres,\n          rating: vote_average.toFixed(1),\n          name: title,\n          id: id,\n          year: Number.parseInt(release_date),\n        };\n      }\n    );\n  }\n\n  getDataSelectedMovie(data) {\n    const {\n      poster_path,\n      genres,\n      vote_average,\n      vote_count,\n      popularity,\n      title,\n      original_title,\n      overview,\n      release_date,\n    } = data;\n\n    const imgUrl = baseImgUrl + imgPosterSize + poster_path;\n\n    return {\n      imgUrl: imgUrl,\n      name: title,\n      vote: vote_average.toFixed(1),\n      votes: vote_count,\n      popularity: popularity,\n      originalTitle: original_title,\n      genres: genresService.getSelectedMovieGenres(genres),\n      about: overview,\n      year: Number.parseInt(release_date),\n    };\n  }\n\n  //   getDataLibraryMovie(data) {\n  //     console.log('data', data);\n\n  //     return data.map(\n  //       ({\n  //         poster_path,\n  //         genres,\n  //         vote_average,\n  //         vote_count,\n  //         popularity,\n  //         title,\n  //         original_title,\n  //         overview,\n  //         id,\n  //       }) => {\n  //         const imgUrl = baseImgUrl + imgPosterSize + poster_path;\n\n  //         return {\n  //           imgUrl: imgUrl,\n  //           genres: genresService.getSelectedMovieGenres(genres),\n  //           rating: vote_average.toFixed(1),\n  //           name: title,\n  //           id: id,\n  //           year: Number.parseInt(release_date),\n  //         };\n  //       }\n  //     );\n  //   }\n}\n","export class GenresService {\n  getTrendMovieGenres(genreIds, allGenres) {\n    const result = [];\n\n    genreIds.find(genreId => {\n      allGenres.forEach(genre => {\n        if (genre.id === genreId) {\n          result.push(genre.name);\n        }\n      });\n    });\n\n    return result;\n  }\n\n  getSelectedMovieGenres(arr) {\n    return arr.map(el => el.name).join(', ');\n  }\n}\n"],"names":["$fA1qS","parcelRequire","$g3JmK","$9bfebb517c25053f$var$genresService","getTrendMovieGenres","genreIds","allGenres","result","find","genreId","forEach","genre","id","push","name","getSelectedMovieGenres","arr","map","el","join","$ce3726a01b8ab25a$var$movieServise","MoviesApiServise","$ce3726a01b8ab25a$var$localStorage","$7TcCz","ModalServise","$hvBA4","LocalStorageService","$ce3726a01b8ab25a$var$dataService","getDataTrendMovies","results","poster_path","genre_ids","vote_average","title","release_date","imgUrl","baseImgUrl","imgPosterSize","genres","rating","toFixed","year","Number","parseInt","getDataSelectedMovie","data","vote_count","popularity","original_title","overview","vote","votes","originalTitle","about","$ce3726a01b8ab25a$var$queueMovieIds","load","queueKey","watchedKey","fetchQueueMovies","then","movies","markupQueueMovies","createMarkupLibraryList","$krGWQ","refs","libraryList","innerHTML","$ce3726a01b8ab25a$var$showQueueMovies","catch","err","console","error","message","log","finally"],"version":3,"file":"library.d33247b2.js.map"}